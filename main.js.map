{"version":3,"sources":["./src/app/components/todo-input/todo-input.component.ts","./src/app/components/todo-input/todo-input.component.html","./src/app/store/selectors/input/input.selector.ts","./src/app/store/reducers/todo/todo.reducer.ts","./src/app/components/todo/todo.component.ts","./src/app/components/todo/todo.component.html","./src/environments/environment.ts","./src/app/store/actions/todo/todo.actions.ts","./src/app/store/reducers/input/input.reducer.ts","./src/app/components/todo-list/todo-list.component.ts","./src/app/components/todo-list/todo-list.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/store/selectors/todo/todo.selector.ts","./src/app/app.module.ts","./src/app/store/actions/input.action.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { select, Store } from '@ngrx/store';\nimport { Component, OnInit } from '@angular/core';\n\nimport { Input } from '../../store/models/input';\nimport { AppState } from '../../store/models/app-state';\nimport { input } from 'src/app/store/selectors/input/input.selector';\nimport { WriteInputAction } from 'src/app/store/actions/input.action';\nimport { CreateTodoAction } from '../../store/actions/todo/todo.actions';\n\n@Component({\n  selector: 'todo-input',\n  templateUrl: './todo-input.component.html',\n  styleUrls: ['./todo-input.component.scss']\n})\nexport class TodoInputComponent implements OnInit {\n  /**\n   * The current value of the todo-input.\n   *\n   * @type {String}\n   */\n  todoInput: string;\n\n  /**\n   * An input stream.\n   *\n   * @type {Observable<Input>}\n   */\n  input$: Observable<Input> = this\n    .store\n    .pipe(\n      select(input),\n      // Similar to the TodoInputComponent::write method, we keep the synchronization\n      // between the model and the store by explicitly using its value on the model.\n      tap(input => this.todoInput = input.description),\n    );\n\n  constructor(protected store: Store<AppState>) { }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * Writes the input to the store. Instead of injecting the value to be passed to\n   * the store, we're specifically using the value of the input's model. This ensures\n   * that the model and the store is always in sync.\n   *\n   * @returns {void}\n   */\n  write(): void {\n    this.store.dispatch(WriteInputAction({ description: this.todoInput }));\n  }\n\n  /**\n   * Creates a new todo item\n   *\n   * @returns {void}\n   */\n  submit(): void {\n    this.store.dispatch(\n      CreateTodoAction({\n        description: this.todoInput,\n        // By default, all newly created todo items are not considered \"complete\"\n        isCompleted: false,\n        isEditing: false,\n      })\n    );\n    // After submitting the todo item, the input must then be cleared, preparing the\n    // user to type in another.\n    this.store.dispatch(WriteInputAction({ description: null }));\n  }\n}\n","<!--\nBy explicitly setting the \"value\" attribute on our input using the observable in the\nstore, we get to be able to replay the changes to the store (via NgRx Store DevTools)\nand to actually see the changes with input values in real-time -- which cannot be\nachieved if we let Angular set its value.\n-->\n<input *ngIf=\"(input$ | async) val\"\n    [(ngModel)]=\"todoInput\"\n    type=\"text\"\n    value=\"{{val}}\"\n    placeholder=\"What needs to be done?\"\n    class=\"new-todo\"\n\n    (keyup)=\"write()\"\n    (keyup.enter)=\"submit()\"\n>\n","import { createSelector } from '@ngrx/store';\nimport { AppState } from '../../models/app-state';\n\nexport const input = createSelector((state: AppState) => state.input, input => input);\n","import { v4 as uuidv4 } from 'uuid';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { ExistingTodo } from '../../models/todo';\nimport { CreateTodoAction, DeleteTodoAction, MassDeleteTodoAction, MassToggleTodoCompletionAction, UpdateTodoAction } from '../../actions/todo/todo.actions';\n\nexport const initialState = [];\nexport const TodoReducer = createReducer<ExistingTodo[]>(\n  initialState,\n  on(CreateTodoAction, (state, todo) => {\n    if ((todo.description || '').trim().length === 0) {\n      // If the user has submitted an empty todo item, do nothing. We won't save this\n      return state;\n    } else if (todo.hasOwnProperty('id')) {\n      // The id that was supplied already exists. We won't allow this\n      return state.map(_todo => _todo.id).includes(todo.id)\n        ? state\n        : state.concat(todo as ExistingTodo);\n    }\n\n    // When there's no id provided, we'll provide our own.\n    return state.concat({ ...todo, id: uuidv4() });\n  }),\n  on(UpdateTodoAction, (state, { id, description, isCompleted, isEditing }) => {\n    return state.map(\n      // We're only going to update the todo item that matches the id that we have\n      // received. Otherwise, we'll update nothing.\n      todo => todo.id === id ? { id, description, isCompleted, isEditing } : todo\n    );\n  }),\n  on(MassDeleteTodoAction, (state, { todos }) => {\n    let ids = todos.map(todo => todo.id);\n\n    return state.filter(todo => ids.includes(todo.id) === false);\n  }),\n  on(DeleteTodoAction, (state, existingTodo) => {\n    return state.filter(todo => todo.id !== existingTodo.id);\n  }),\n  on(MassToggleTodoCompletionAction, (state, { isCompleted }) => {\n    return state.map(todo => ({ ...todo, isCompleted }));\n  }),\n);\n","import { Store } from '@ngrx/store';\nimport { Component, Input, OnInit } from '@angular/core';\n\nimport { ExistingTodo } from '../../store/models/todo';\nimport { AppState } from '../../store/models/app-state';\nimport { DeleteTodoAction, UpdateTodoAction } from '../../store/actions/todo/todo.actions';\n\n@Component({\n  selector: 'todo',\n  templateUrl: './todo.component.html',\n  styleUrls: ['./todo.component.scss']\n})\nexport class TodoComponent implements OnInit {\n\n  /**\n   * The todo object containing its metadata\n   *\n   * @type {ExistingTodo}\n   */\n  @Input('metadata') todo: ExistingTodo;\n\n  /**\n   * The value that the user has set to replace the description of the current todo.\n   *\n   * @type {String}\n   */\n  todoInput: string;\n\n  /**\n   * Determines whether a todo item has already been completed.\n   *\n   * @type {Boolean}\n   */\n  isCompleted: boolean;\n\n  constructor(protected store: Store<AppState>) { }\n\n  ngOnInit(): void {\n    this.todoInput = this.todo.description;\n    this.isCompleted = this.todo.isCompleted;\n  }\n\n  /**\n   * Gets triggered when a todo item gets clicked or tapped twice. The user will then\n   * be able to edit the todo item.\n   *\n   * @returns {void}\n   */\n  edit(): void {\n    this.store.dispatch(UpdateTodoAction({ ...this.todo, isEditing: true }))\n  }\n\n  /**\n   * Gets triggered when a user has finished editing a todo item.\n   *\n   * @returns {void}\n   */\n  update(): void {\n    this.store.dispatch(\n      UpdateTodoAction({\n        ...this.todo,\n        description: this.todoInput,\n        isEditing: false\n       })\n    );\n  }\n\n  /**\n   * Marks the todo as either completed or not-completed.\n   *\n   * @param {Boolean} isCompleted\n   *\n   * @returns {void}\n   */\n  toggleCompletion(isCompleted): void {\n    this.store.dispatch(\n      UpdateTodoAction({ ...this.todo, isCompleted: isCompleted })\n    );\n  }\n\n  /**\n   * Delete the todo, and remove it from the list.\n   *\n   * @returns {void}\n   */\n  delete(): void {\n    this.store.dispatch(DeleteTodoAction(this.todo));\n  }\n}\n","<input *ngIf=\"todo.isEditing\" [(ngModel)]=\"todoInput\" type=\"text\" class=\"edit\" (keyup.enter)=\"update()\">\n<div *ngIf=\"todo.isEditing === false\" class=\"view\" (dblclick)=\"edit($event)\">\n    <input type=\"checkbox\" class=\"toggle\" [(ngModel)]=\"isCompleted\" (change)=\"toggleCompletion($event.target.checked)\">\n    <label>{{ todo.description }}</label>\n    <button class=\"destroy\" (click)=\"delete()\"></button>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { createAction, props } from '@ngrx/store';\n\nimport { Todo, ExistingTodo } from '../../models/todo';\n\nexport const CreateTodoAction = createAction('[TODO] Create', props<Todo>());\nexport const UpdateTodoAction = createAction('[TODO] Update', props<ExistingTodo>());\nexport const MassDeleteTodoAction = createAction('[TODO] Mass Delete', props<{ todos: ExistingTodo[] }>());\nexport const DeleteTodoAction = createAction('[TODO] Delete', props<ExistingTodo>());\nexport const MassToggleTodoCompletionAction = createAction('[TODO] Mass Toggle Todo Completion', props<{ isCompleted: boolean }>());\n","import { createReducer, on } from '@ngrx/store';\n\nimport { Input } from '../../models/input';\nimport { WriteInputAction } from '../../actions/input.action';\n\nexport const initialState = { description: null };\n\nexport const InputReducer = createReducer<Input>(\n  initialState,\n  on(WriteInputAction, (state, input) => input)\n);\n","import { Observable } from 'rxjs';\nimport { select, Store } from '@ngrx/store';\nimport { Component, OnInit } from '@angular/core';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { ExistingTodo } from '../../store/models/todo';\nimport { AppState } from '../../store/models/app-state';\nimport { allTodos, completeTodos, incompleteTodos } from '../../store/selectors/todo/todo.selector';\nimport { MassDeleteTodoAction, MassToggleTodoCompletionAction } from '../../store/actions/todo/todo.actions';\n\n@Component({\n  selector: 'todo-list',\n  templateUrl: './todo-list.component.html',\n  styleUrls: ['./todo-list.component.scss']\n})\nexport class TodoListComponent implements OnInit {\n\n  /**\n   * A list of the todo-items that the user has provided.\n   *\n   * @type {Observable<ExistingTodo[]>}\n   */\n  todos$: Observable<ExistingTodo[]> = this.store.pipe(\n    select(allTodos),\n  );\n\n  /**\n   * A list of completed todo-items\n   *\n   * @type {Observable<ExistingTodo[]>}\n   */\n  completedTodos$: Observable<ExistingTodo[]> = this.store.pipe(\n    select(completeTodos),\n  );\n\n  /**\n   * A list of incomplete todo-items\n   *\n   * @type {Observable<ExistingTodo[]>}\n   */\n  incompleteTodos$: Observable<ExistingTodo[]> = this.store.pipe(\n    select(incompleteTodos),\n  );\n\n  /**\n   * An observable that emits a boolean value indicating whether there are todo-items\n   * on the list including both completed and non-completed items.\n   *\n   * @type {Observable<boolean>}\n   */\n  hasTodoItems$: Observable<boolean> = this.store\n    .pipe(\n      select(allTodos),\n      map(todos => todos.length > 0),\n      // By adding distinctUntilChanged(), we ensure that a boolean value is only\n      // emmitted when needed. Once when there's atleast one (1) todo item, and once\n      // when there's no todo item. Otherwise, this todo item will emit a value\n      // everytime a todo item is added or removed.\n      distinctUntilChanged(),\n    );\n\n  constructor(protected store: Store<AppState>) { }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * Deletes the completed todo items fron the todo-list.\n   *\n   * @param {ExistingTodo[]} todos\n   *\n   * @returns {void}\n   */\n  delete(todos: ExistingTodo[]): void {\n    this.store.dispatch(MassDeleteTodoAction({ todos }));\n  }\n\n  /**\n   * Marks all todos as either completed or not-completed.\n   *\n   * @param {Boolean} isCompleted\n   *\n   * @returns {void}\n   */\n  toggleCompletion(isCompleted): void {\n    this.store.dispatch(MassToggleTodoCompletionAction({ isCompleted }));\n  }\n}\n","<section class=\"todoapp\">\n    <header class=\"header\">\n        <h1>todos</h1>\n        <todo-input></todo-input>\n    </header>\n    <section class=\"main\">\n        <ng-container *ngIf=\"hasTodoItems$ | async\">\n            <input id=\"toggle-all\" class=\"toggle-all\" type=\"checkbox\" (change)=\"toggleCompletion($event.target.checked)\">\n            <label for=\"toggle-all\">Mark all as complete</label>\n        </ng-container>\n        <ul class=\"todo-list\">\n            <li *ngFor=\"let todo of todos$ | async\" [ngClass]=\"{completed: todo.isCompleted, editing: todo.isEditing}\">\n                <todo [metadata]=\"todo\"></todo>\n            </li>\n        </ul>\n    </section>\n    <footer class=\"footer\" *ngIf=\"hasTodoItems$ | async\">\n        <ng-container *ngIf=\"(incompleteTodos$ | async) as incompleteTodos\" [ngSwitch]=\"incompleteTodos.length\">\n            <span *ngSwitchCase=\"1\" class=\"todo-count\">1 item left</span>\n            <span *ngSwitchDefault class=\"todo-count\">{{ incompleteTodos.length }} items left</span>\n        </ng-container>\n        <ng-container *ngIf=\"(completedTodos$ | async) as completedTodos\">\n            <button *ngIf=\"completedTodos.length\" class=\"clear-completed\" (click)=\"delete(completedTodos)\">Clear Completed</button>\n        </ng-container>\n    </footer>\n</section>\n<footer class=\"info\">\n    <p>Double-click to edit a todo</p>\n    <p>Created by <a href=\"https://github.com/dreadnautxbuddha\">Peter Cortez</a></p>\n    <p>using <a href=\"https://angular.io/\">Angular2</a></p>\n</footer>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'todomvc-angular';\n}\n","<todo-list></todo-list>\n","import { createSelector } from '@ngrx/store';\nimport { AppState } from '../../models/app-state';\n\nconst all = (state: AppState) => state.todos;\n\nexport const allTodos = createSelector(\n  all,\n  todos => todos,\n);\nexport const completeTodos = createSelector(\n  all,\n  todos => todos.filter(todo => todo.isCompleted),\n);\nexport const incompleteTodos = createSelector(\n  all,\n  todos => todos.filter(todo => todo.isCompleted === false),\n);\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\n\nimport { AppComponent } from './app.component';\nimport { environment } from 'src/environments/environment';\nimport { TodoComponent } from './components/todo/todo.component';\nimport { TodoReducer } from './store/reducers/todo/todo.reducer';\nimport { InputReducer } from './store/reducers/input/input.reducer';\nimport { TodoInputComponent } from './components/todo-input/todo-input.component';\nimport { TodoListComponent } from './components/todo-list/todo-list.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TodoInputComponent,\n    TodoComponent,\n    TodoListComponent,\n  ],\n  imports: [\n    FormsModule,\n    BrowserModule,\n    StoreModule.forRoot({\n      todos: TodoReducer,\n      input: InputReducer,\n    }),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25,\n      logOnly: environment.production,\n    }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { createAction, props } from '@ngrx/store';\n\nimport { Input } from '../models/input';\n\nexport const WriteInputAction = createAction('[INPUT] Write', props<Input>());\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}